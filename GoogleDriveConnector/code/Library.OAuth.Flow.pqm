//
// OAuth2 flow definition
//
let
    //
    // Imported Functions
    //

    // Load common library functions
    Extension.LoadFunction = (name as text) =>
        let
            binary = Extension.Contents(name),
            asText = Text.FromBinary(binary)
        in
            Expression.Evaluate(asText, #shared),

    Extension.StringParser = Extension.LoadFunction("Library.Helper.pqm")[#"Extension.StringParser"],

    //
    // Local Functions
    //
    // Constants
    // We could change this to a config json instead of several individual config files.
    client_id = Extension.StringParser("client_id"),
    client_secret = Extension.StringParser("client_secret"),
    redirect_uri = Text.FromBinary(Extension.Contents("redirect_uri")),
    windowWidth = Number.FromText(Text.FromBinary(Extension.Contents("windowWidth"))),
    windowHeight = Number.FromText(Text.FromBinary(Extension.Contents("windowHeight"))),

    // Start
    StartLogin = (resourceUrl, state, display) =>
        let
            AuthorizeUrl = "https://accounts.google.com/o/oauth2/v2/auth?" & Uri.BuildQueryString([
                scope           =   "https://www.googleapis.com/auth/drive.readonly",
                response_type   =   "code",
                access_type     =   "offline", // added to return a refresh token
                prompt          =   "consent", // added to **always** return a refresh_token. Problem is it gets a new refresh token each time. Not sure how this affects things.
                state           =    state,
                redirect_uri    =    redirect_uri,
                client_id       =    client_id
            ])
        in
            [
                LoginUri = AuthorizeUrl,
                CallbackUri = redirect_uri,
                WindowHeight = windowHeight,
                WindowWidth = windowWidth,
                Context = null
            ],

    // Finish
    FinishLogin = (context, callbackUri, state) =>
        let
            // Get query string from the callbackUri
            Parts = Uri.Parts(callbackUri)[Query],

            // Raise an error if the callbackUri contains an error
            Result = 
                // Error and Description
                if (Record.HasFields(Parts, {"error", "error_description"})) then
                    error Error.Record(Parts[error], Parts[error_description], Parts)
                // Error Only
                else if (Record.HasFields(Parts, {"error"})) then
                    // Access Denied
                    if (Parts[error] = "access_denied") then
                        error Error.Record("Access Denied", "This account does not have access to" & context & ".")
                    // Other Login Failure
                    else
                        error Error.Record(Parts[error], "Failed to login to " & context & ".")
                // Success & Code Received
                else if (Record.HasFields(Parts, {"code"})) then
                    // Continue with Authorization
                    //TokenMethod("authorization_code", "code", Parts[code])
                    "Temp"
                else
                    // Other Error
                    error Error.Record(
                        Text.Combine(
                            Table.ToList(
                                Record.ToTable(Parts),
                                Combiner.CombineTextByDelimiter(",")
                            )
                        )
                    )
        in
            TokenMethod("authorization_code", "code", Parts[code]),

    // Refresh
    // Other versions of this use the TokenMethod as such
    // Refresh = (resourceUrl, refresh_token) => TokenMethod("refresh_token", "refresh_token", refresh_token);
    Refresh = (dataSourcePath, refreshToken) =>
        let
            Response = Web.Contents("https://oauth2.googleapis.com/token", [
                Content = Text.ToBinary(Uri.BuildQueryString([
                    client_id =         client_id,
                    client_secret =     client_secret,
                    refresh_token =     refreshToken,
                    grant_type =        "refresh_token"
                ])),
                Headers=[#"Content-type" = "application/x-www-form-urlencoded",#"Accept" = "application/json"]]),
            Parts = Json.Document(Response)
        in
            Parts,

    // You can also implement a logout if needed
    // Logout = (token) => "https://accounts.google.com/o/oauth2/revoke?token=" & token;

    // TokenMethod
    TokenMethod = (grantType, tokenFiled, code) =>
        let
            Response = Web.Contents("https://oauth2.googleapis.com/token", [
                Content = Text.ToBinary(Uri.BuildQueryString([
                    client_id =         client_id,
                    client_secret =     client_secret,
                    code =              code,
                    grant_type =        "authorization_code", //grantType,
                    access_type =       "offline", //this may not need to be here
                    redirect_uri =      redirect_uri
                ])),
                Headers=[#"Content-type" = "application/x-www-form-urlencoded",#"Accept" = "application/json"]]),
            Parts = Json.Document(Response)
        in
            Parts
in
    //
    // Exported Functions
    //
    [
        StartLogin = StartLogin,
        FinishLogin = FinishLogin,
        Refresh = Refresh
    ]